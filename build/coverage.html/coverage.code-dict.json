{"/home/travis/build/npmtest/node-npmtest-phantom-render-stream/test.js":"/* istanbul instrument in package npmtest_phantom_render_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom-render-stream/lib.npmtest_phantom_render_stream.js":"/* istanbul instrument in package npmtest_phantom_render_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantom_render_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantom_render_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom-render-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantom-render-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantom_render_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantom_render_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantom_render_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phantom_render_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantom_render_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phantom_render_stream.__dirname + '/lib.npmtest_phantom_render_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom-render-stream/node_modules/phantom-render-stream/index.js":"var mkdirp = require('mkdirp');\nvar thunky = require('thunky');\nvar fs = require('fs');\nvar stream = require('stream');\nvar once = require('once');\nvar ldjson = require('ldjson-stream');\nvar duplexify = require('duplexify');\nvar concat = require('concat-stream');\nvar eos = require('end-of-stream');\nvar LRU = require('lru-cache');\nvar serverDestroy = require('server-destroy');\nvar proc = require('child_process');\nvar xtend = require('xtend');\nvar hat = require('hat');\nvar path = require('path');\nvar util = require('util');\nvar os = require('os');\nvar http = require('http');\nvar debug = require('debug')('phantom-render-stream');\nvar debugStream = require('debug-stream')(debug);\nvar phantomjsPath = require('phantomjs-prebuilt').path;\n\nvar noop = function() {};\n\nvar TMP = path.join(fs.existsSync('/tmp') ? '/tmp' : os.tmpDir(), 'phantom-render-stream');\n\nvar serve = function(opts) {\n  var cache = LRU(200);\n  var server = http.createServer(function(request, response) {\n    request.connection.unref();\n\n    var id = request.url.replace(/^\\//, '');\n    var html = cache.get(id);\n\n    if(!html) {\n      response.writeHead(404);\n      response.end();\n    } else {\n      response.writeHead(200, {\n        'Content-Type': 'text/html',\n        'Content-Length': html.length\n      });\n      response.end(html);\n    }\n  });\n\n  var listen = thunky(function(cb) {\n    server.listen(0, opts.listen, function() {\n      server.unref();\n\n      var port = server.address().port;\n      cb(null, 'http://localhost:' + port);\n    });\n  });\n\n  var set = function(id, html, cb) {\n    listen(function(err, base) {\n      if(err) return cb(err);\n      cache.set(id, html);\n      cb(null, base + '/' + id);\n    });\n  };\n\n  var safeDestroy = function(cb) {\n    try {\n      // throws if server is not started\n      server.destroy(cb);\n    } catch(err) {\n      if(cb) cb();\n    }\n  };\n\n  server.set = set;\n  server.safeDestroy = safeDestroy;\n  serverDestroy(server);\n\n  return server;\n};\n\nvar spawn = function(opts) {\n  var phantomjsArgs = opts.phantomFlags.concat('phantomScript' in opts ? opts.phantomScript : path.join(__dirname, 'phantom-process.js'));\n  var child = proc.spawn(phantomjsPath, phantomjsArgs);\n  debug('phantom (%s) spawned', child.pid);\n\n  var input = ldjson.serialize();\n  var output = ldjson.parse({strict: false});\n\n  child.stdout.pipe(debugStream('phantom (%s) stdout', child.pid)).pipe(output);\n  child.stderr.pipe(debugStream('phantom (%s) stderr', child.pid)).resume();\n  input.pipe(debugStream('phantom (%s) stdin', child.pid)).pipe(child.stdin);\n\n  var onerror = once(function() {\n    child.kill();\n  });\n\n  child.stdin.on('error', onerror);\n  child.stdout.on('error', onerror);\n  child.stderr.on('error', onerror);\n\n  var result = duplexify.obj(input, output);\n\n  result.process = child;\n\n  result.destroy = function() {\n    child.kill();\n  };\n\n  result.ref = function() {\n    child.stdout.ref();\n    child.stderr.ref();\n    child.stdin.ref();\n    child.ref();\n  };\n\n  result.unref = function() {\n    child.stdout.unref();\n    child.stderr.unref();\n    child.stdin.unref();\n    child.unref();\n  };\n\n  var onclose = once(function() {\n    debug('phantom (%s) died', child.pid);\n    result.emit('close');\n  });\n\n  child.on('exit', onclose);\n  child.on('close', onclose);\n\n  return result;\n};\n\nvar pool = function(opts) {\n  var size = opts.pool;\n  var timeout = opts.timeout;\n  var maxErrors = opts.maxErrors;\n\n  var workers = [];\n  for (var i = 0; i < size; i++) workers.push({timeout:null, queued:[], stream:null, errors:0, kill:noop});\n\n  var dup = new stream.Duplex({objectMode:true});\n\n  var updateTimeout = function(worker) {\n    if (!timeout) return;\n    if (!worker.queued.length && worker.timeout) {\n      clearTimeout(worker.timeout);\n      worker.timeout = null;\n    } else if (worker.queued.length && !worker.timeout) {\n      worker.timeout = setTimeout(worker.kill, timeout);\n    }\n  };\n\n  var updateReferences = function(worker) {\n    if (!worker.stream) return;\n    if (worker.queued.length) worker.stream.ref();\n    else worker.stream.unref();\n  };\n\n  var update = function(worker) {\n    updateTimeout(worker);\n    updateReferences(worker);\n  };\n\n  var select = function() {\n    var worker = workers.reduce(function(a,b) {\n      return a.queued.length < b.queued.length ? a : b;\n    });\n\n    if (worker.stream) return worker;\n\n    worker.stream = spawn(opts);\n    worker.kill = worker.stream.process.kill.bind(worker.stream.process);\n\n    worker.stream.on('close', function() {\n      var queued = worker.queued;\n      worker.queued = [];\n      worker.stream = null;\n      worker.errors = 0;\n\n      // emit all data as success=false\n      queued.forEach(function(data) {\n        data.success = false;\n        dup.push(data);\n      });\n\n      update(worker);\n    });\n\n    worker.stream.on('data', function(data) {\n      if (data.log) return dup.push(data);\n\n      if (!data.success) worker.errors++;\n      else worker.errors = 0;\n\n      if (worker.errors > maxErrors) worker.stream.destroy();\n      for (var i = 0; i < worker.queued.length; i++) {\n        var cand = worker.queued[i];\n        if (cand.id === data.id) {\n          worker.queued.splice(i, 1);\n          update(worker);\n          break;\n        }\n      }\n\n      dup.push(data);\n    });\n\n    return worker;\n  };\n\n  dup.destroy = function() {\n    workers.forEach(function(worker) {\n      if (worker.stream) worker.stream.destroy();\n    });\n  };\n\n  dup._write = function(data, enc, cb) {\n    var worker = select();\n    worker.queued.push(data);\n    worker.stream.write(data);\n    update(worker);\n    cb();\n  };\n\n  dup._read = function() {\n    // do nothing ... backpressure is not an issue here\n  };\n\n  return dup;\n};\n\nvar create = function(opts) {\n  var defaultOpts = {\n    pool         : 1,\n    maxErrors    : 3,\n    phantomFlags : [],\n    timeout      : 30000,\n    retries      : 1,\n    tmp          : TMP,\n    format       : 'png',\n    quality      : 100,\n    listen       : '0.0.0.0',\n    requestWhitelist: false\n  };\n\n  opts = xtend(defaultOpts,opts);\n\n  var worker = pool(opts);\n  var server = serve(opts);\n  var queued = {};\n\n  worker.on('data', function(data) {\n    var proxy = queued[data.id];\n    if (!proxy) return;\n\n    if (data.log) return proxy.emit('log', data.log);\n\n    if (!data.success && data.tries < opts.retries) {\n      fs.unlink(data.filename, noop);\n      data.tries++;\n      data.filename = _getTmpFile(opts.tmp,data.format);\n      data.sent = Date.now();\n      return worker.write(data);\n    }\n\n    delete queued[data.id];\n    if (!data.success) {\n      fs.unlink(data.filename, noop);\n      return proxy.destroy(new Error(\n        'Render failed (' + data.tries + ' tries) ' +\n        'Request details: ' + JSON.stringify(data)));\n    }\n\n    eos(proxy, { writable: false }, function() {\n      fs.unlink(data.filename, noop);\n    });\n\n    proxy.setReadable(fs.createReadStream(data.filename));\n  });\n\n  var mkdir = thunky(function(cb) {\n    mkdirp(opts.tmp, cb);\n  });\n\n  var render  = function(url, ropts) {\n    if(typeof url !== 'string') {\n      ropts = url;\n      url = null;\n    }\n\n    var id = hat();\n    var proxy = queued[id] = duplexify();\n\n    var initialize = function (url) {\n      sopts = xtend(opts, ropts)\n      ropts = xtend({\n        url        : url\n      }, sopts);\n\n      ropts.maxRenders = opts.maxRenders;\n      ropts.filename = _getTmpFile(opts.tmp,ropts.format);\n      ropts.id = id;\n      ropts.sent = Date.now();\n      ropts.tries = 0;\n      if (ropts.crop === true) ropts.crop = {top:0, left:0};\n\n      ropts.injectJs = ropts.injectJs || opts.injectJs || [];\n\n      mkdir(function(err) {\n        if (err) return proxy.destroy(err);\n        ropts.tries++;\n        worker.write(ropts);\n      });\n    };\n\n    proxy.on('close', function() { // gc yo\n      delete queued[id];\n    });\n\n    if(url) {\n      initialize(url);\n    } else {\n      var sink = concat(function(data) {\n        server.set(id, data, function(err, url) {\n          if(err) return proxy.destroy(err);\n          initialize(url);\n        });\n      });\n\n      proxy.setWritable(sink);\n    }\n\n    return proxy;\n  };\n\n  render.destroy = function(cb) {\n    worker.destroy();\n    server.safeDestroy(cb);\n  };\n\n  return render;\n};\n\nvar _getTmpFile = function(tmpDir,format) {\n  return path.join(tmpDir, process.pid + '.' + hat()) + '.' + format;\n}\n\nmodule.exports = create;\n","/home/travis/build/npmtest/node-npmtest-phantom-render-stream/node_modules/phantom-render-stream/phantom-process.js":"// Code to be run by PhantomJS.\n// The docs for these modules are here: http://phantomjs.org/api/\n// Note that the 'fs' module here has a different API than the one in node.js core.\nvar webpage = require('webpage');\nvar system = require('system');\n\nvar page = createWebPage();\n\nfunction createWebPage (id) {\n  var page = webpage.create();\n  page.id = id;\n\n  page.log = function(message) {\n    var json = JSON.stringify({\n      id: page.id,\n      log: message\n    });\n    console.log(json);\n  }\n\n  page.onConsoleMessage = function (msg, lineNum, sourceId) {\n    page.log({\n      type: 'consoleMessage',\n      data: {\n        msg: msg,\n        lineNum: lineNum,\n        sourceId: sourceId\n      }\n    });\n  };\n\n  page.onError = function (msg, trace) {\n    page.log({\n      type: 'error',\n      data: {\n        msg: msg,\n        trace: trace\n      }\n    });\n  };\n\n  page.onResourceError = function (resourceError) {\n    page.log({\n      type: 'resourceError',\n      data: {\n        resourceError: resourceError\n      }\n    });\n  };\n\n  page.onResourceTimeout = function(request) {\n    page.log({\n      type: 'resourceTimeout',\n      data: {\n        request: request\n      }\n    });\n  };\n\n  return page;\n}\n\n\nvar forcePrintMedia = function() {\n  page.evaluate(function() {\n    var findPrintMedia = function() {\n      var styles = [];\n\n      Array.prototype.slice.call(document.querySelectorAll('style')).forEach(function(el) {\n        styles.push(el.innerText);\n      });\n      Array.prototype.slice.call(document.querySelectorAll('link')).forEach(function(el) {\n        if (el.rel && el.rel.indexOf('stylesheet') === -1) return;\n\n        try {\n          // try-catch is just precaution (we already set web-security to no)\n\n          var xhr = new XMLHttpRequest();\n\n          // 99.99% of the cases we just hit the cache so no real io\n          xhr.open('GET', el.href, false);\n          xhr.send(null);\n\n          styles.push(xhr.responseText);\n        } catch (err) {\n          // do nothing\n        }\n      });\n\n      var style = styles.join('\\n');\n\n      return style.split('@media print').slice(1).filter(function(text) {\n        return text.indexOf('attr(href)') === -1;\n      }).map(function(text) {\n        var lvl = 0;\n\n        var from = text.indexOf('{');\n\n        for (var i = from; i < text.length; i++) {\n          if (text[i] === '{') lvl++;\n          if (text[i] === '}') lvl--;\n          if (lvl === 0) break;\n        }\n\n        return text.substring(from+1, i-1);\n      }).join('\\n');\n    };\n\n    var div = document.createElement('div');\n\n    div.innerHTML = '<style>\\n'+findPrintMedia()+'\\n</style>';\n    document.body.appendChild(div);\n    document.body.style.backgroundImage = 'none';\n    document.body.style.backgroundColor = 'white';\n  });\n};\n\nvar renders = 0, maxRenders = 500;\nvar loop = function() {\n  var line = system.stdin.readLine();\n  if (!line.trim()) return phantom.exit(0);\n\n  try {\n    line = JSON.parse(line);\n  } catch (err) {\n    return phantom.exit(1);\n  }\n\n  if (!page) page = createWebPage(line.id);\n  else page.id = line.id;\n\n  if (line.cookies && line.cookies.length > 0) {\n    line.cookies.forEach(function (c) {\n      phantom.addCookie(c);\n    });\n  }\n\n  // inject polyfills or other scripts if necessary\n  if (line.injectJs && line.injectJs.length > 0) {\n    page.onInitialized = function () {\n      line.injectJs.forEach(function (path) {\n        page.log({\n          type: 'injectedScript',\n          data: {path: path}\n        });\n        page.injectJs(path);\n      });\n    };\n  }\n\n  if (line.maxRenders) maxRenders = line.maxRenders;\n  page.viewportSize = {\n    width: line.width || 1280,\n    height: line.height || 960\n  };\n\n  page.paperSize = line.paperSize ||\n    {\n      format: line.paperFormat || 'A4',\n      orientation: line.orientation || 'portrait',\n      margin: line.margin || '0cm'\n    };\n\n  if (line.zoomFactor) page.zoomFactor = line.zoomFactor;\n\n  if (line.dpi) page.settings.dpi = line.dpi;\n\n  if (line.userAgent) page.settings.userAgent = line.userAgent;\n\n  if (line.headers) page.customHeaders = line.headers;\n\n  if (line.crop) {\n    page.clipRect = {\n      width: line.crop.width || page.viewportSize.width,\n      height: line.crop.height || page.viewportSize.height,\n      top: line.crop.top || 0,\n      left: line.crop.left || 0\n    }\n  }\n\n  if(line.javascriptEnabled === false) page.settings.javascriptEnabled = false;\n\n  if(line.requestWhitelist) {\n    page.onResourceRequested = function(reqData, networkRequest) {\n      if(line.url === reqData.url) return; // allow self-request\n      var abort = true;\n      line.requestWhitelist.forEach(function(rgxp) {\n        var r = new RegExp(rgxp, 'gi');\n        if(r.test(reqData.url)) abort = false;\n      });\n      if(abort) {\n        console.log('Deny network request to', reqData.url);\n        networkRequest.abort();\n      }\n    }\n  }\n\n  var onerror = function(message) {\n    page.log(message);\n    line.success = false;\n    console.log(JSON.stringify(line));\n    page = null;\n    loop();\n  }\n\n  page.open(line.url, function(requestStatus) {\n    if (requestStatus !== 'success') return onerror({\n      type: 'pageFetchError',\n      data: {status: requestStatus}\n    });\n\n    page.paperSize = line.paperSize || {\n      format: line.paperFormat || 'A4',\n      orientation: line.orientation || 'portrait',\n      margin: line.margin || '0cm',\n      width: '8.5in',\n      height: '11in',\n      header: {},\n      footer: {}\n    }\n\n    /* A PhantomJSPrinting object in the rendered page will determine the header/footer */\n    if (page.evaluate(function(){return typeof PhantomJSPrinting == \"object\";})) {\n      var paperSize = page.paperSize;\n      paperSize.header.height = page.evaluate(function() {\n        return PhantomJSPrinting.header.height;\n      });\n      paperSize.header.contents = phantom.callback(function(pageNum, numPages) {\n        return page.evaluate(function(pageNum, numPages){return PhantomJSPrinting.header.contents(pageNum, numPages);}, pageNum, numPages);\n      });\n      paperSize.footer.height = page.evaluate(function() {\n        return PhantomJSPrinting.footer.height;\n      });\n      paperSize.footer.contents = phantom.callback(function(pageNum, numPages) {\n        return page.evaluate(function(pageNum, numPages){return PhantomJSPrinting.footer.contents(pageNum, numPages);}, pageNum, numPages);\n      });\n      page.paperSize = paperSize;\n    }\n\n    var render = function() {\n      setTimeout(function() {\n        if (line.printMedia) forcePrintMedia();\n        page.render(line.filename, {format:line.format || 'png', quality:line.quality || 100});\n        page = null;\n        line.success = true;\n        console.log(JSON.stringify(line));\n        if (maxRenders && renders++ >= maxRenders) return phantom.exit(0);\n        loop();\n      }, 0);\n    };\n\n    var waitAndRender = function() {\n      var timeout = setTimeout(function() {\n        page.onAlert('webpage-error');\n      }, line.timeout);\n\n      var rendered = false;\n      page.onAlert = function(msg) {\n        if (msg !== 'webpage-renderable' && msg !== 'webpage-error') return;\n        if (rendered) return;\n        rendered = true;\n        clearTimeout(timeout);\n\n        if (msg === 'webpage-renderable') render();\n        else onerror({\n          type: 'expectError',\n          data: {expects: line.expects}\n        });\n      };\n\n      page.evaluate(function(expects) {\n        if (window.renderable === expects) return alert('webpage-renderable');\n        if (window.renderable) return alert('webpage-error');\n\n        var renderable = false;\n        Object.defineProperty(window, 'renderable', {\n          get: function() {\n            return renderable;\n          },\n          set: function(val) {\n            renderable = val;\n            if (renderable === expects) alert('webpage-renderable');\n            else alert('webpage-error');\n          }\n        });\n      }, line.expects);\n    };\n\n    var renderable = page.evaluate(function() {\n      return window.renderable;\n    });\n\n    if (renderable === false && !line.expects) line.expects = true;\n    if (line.expects === renderable) return render();\n    if (line.expects) return waitAndRender();\n    render();\n  });\n};\n\nloop();\n"}